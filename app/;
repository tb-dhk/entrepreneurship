import React, { useState, useEffect } from 'react';
import { SHA256 } from 'crypto-js'; // Import crypto-js for hashing if needed
import { LineChart } from '@mui/x-charts';
import axios from 'axios'; // Import axios for making HTTP requests

// Utility function to determine text color based on background color
const getSpanColor = (hexCode) => {
  const r = parseInt(hexCode.substr(1, 2), 16);
  const g = parseInt(hexCode.substr(3, 2), 16);
  const b = parseInt(hexCode.substr(5, 2), 16);
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;
  return brightness > 125 ? 'black' : 'white';
};

// Function to fetch data from an Azure SQL database
async function fetchFromAzure(endpoint) {
  try {
    const response = await axios.get(`https://localhost:5000/api/${endpoint}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching data from Azure:', error);
    return [];
  }
}

export default function Trendsdiv({ navigation }) {
  const [selectedFoods, setSelectedFoods] = useState([]);
  const [bins, setBins] = useState([]);
  const [logs, setLogs] = useState([]);
  const [food, setFood] = useState([]);
  const [blendedColor, setBlendedColor] = useState('#CCCCCC');

  // Function to handle food item clicks
  const handleFoodClick = (food) => {
    if (selectedFoods.includes(food)) {
      setSelectedFoods(selectedFoods.filter(item => item !== food));
    } else {
      setSelectedFoods([...selectedFoods, food]);
    }
  };

  // Function to load data from Azure SQL
  const loadData = async () => {
    try {
      const logsData = await fetchFromAzure('logs');
      setLogs(logsData);
      console.log("logs:", logsData);

      const foodData = await fetchFromAzure('food');
      setFood(foodData);
      console.log("food:", foodData);

      const binData = await fetchFromAzure('bins');
      setBins(binData);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  // Effect to fetch initial data
  useEffect(() => {
    loadData();
  }, []);

  const findEarliestDate = (logs) => {
    const earliestDate = new Date(Math.min(...logs.map(log => new Date(log.timestamp))));
    return earliestDate.toLocaleDateString();
  };

  const processFoodData = () => {
    const foodDataMap = {};
    const earliestDate = new Date(findEarliestDate(logs));

    logs.forEach(log => {
      console.log("scanning log", log.timestamp, log.estimated_amts_of_food);
      const foodEstimates = JSON.parse(log.estimated_amts_of_food);
      const logDate = new Date(log.timestamp);
      const daysSinceEarliest = Math.floor((logDate - earliestDate) / (1000 * 60 * 60 * 24));

      Object.keys(foodEstimates).forEach(foodId => {
        const parsedFoodId = parseInt(foodId);
        if (selectedFoods.includes(parsedFoodId)) {
          if (!foodDataMap[parsedFoodId]) {
            foodDataMap[parsedFoodId] = {};
          }

          const amount = foodEstimates[parsedFoodId];

          if (foodDataMap[parsedFoodId][daysSinceEarliest]) {
            foodDataMap[parsedFoodId][daysSinceEarliest] += amount;
          } else {
            foodDataMap[parsedFoodId][daysSinceEarliest] = amount;
          }
          console.log("added new date", parsedFoodId, daysSinceEarliest, foodDataMap[parsedFoodId][daysSinceEarliest]);
        }
      });
    });

    console.log("food data map", foodDataMap);
    return foodDataMap;
  };

  const prepareChartData = (foodDataMap, earliestDate) => {
    const xAxis = [];
    const series = [];

    Object.entries(foodDataMap).forEach(([foodId, data]) => {
      const foodSeries = [];

      // Get the days since earliest date
      for (let day in data) {
        const date = new Date(earliestDate);
        date.setDate(date.getDate() + parseInt(day));
        xAxis.push(date.toLocaleDateString());
        foodSeries.push({ x: date.toLocaleDateString(), y: data[day] });
      }

      series.push({
        dataKey: foodId,
        data: foodSeries
      });
    });

    // Remove duplicate dates from xAxis
    const uniqueXAxis = [...new Set(xAxis)];
    return { series, xAxis: uniqueXAxis };
  };

  // Process food data and prepare chart data
  const foodDataMap = processFoodData();
  const { series, xAxis } = prepareChartData(foodDataMap, findEarliestDate(logs));

  // Render the LineChart
  return (
    <LineChart
      width={window.innerWidth - 30}
      height={250}
      series={series}
      xAxis={{ dataKey: 'x', label: { text: 'Date' }, data: xAxis }}
      dataset={[{}]}
      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
    />
  );
}


const styles = {
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'antiquewhite',
  },
  buttonContainer: {
    flexDirection: 'row',
    marginVertical: 20,
  },
};

